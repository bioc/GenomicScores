} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
lapply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
}),
# inlineCSS("#algo .selectize-dropdown-content > .option[data-value='A'] { color: red; }"),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
options <- availableGScores()
options
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
lapply(options$Name, function(x){
if(options[options$Name==x,]$Installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
options <- availableGScores()
lapply(options$Name, function(x){
if(options[options$Name==x,]$Installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options
options$Name
options[options$Name==x,]$Installed
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shinyApp(ui, server)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(shiny)
names <- c("A", "B", "C")
installed <- c("TRUE", "FALSE", "FALSE")
options <- data.frame(names, installed)
cssTemplate <- function(color){
sprintf(
".selectize-dropdown-content > .option,
.selectize-input > .item
{
color: %s;
}",
color
)
}
ui <- fluidPage(
tags$head(
uiOutput("css")
),
selectInput("apkgs", "Select a package", choices = options$names),
)
server <- function(input, output, session) {
output[["css"]] <- renderUI({
color <- ifelse(input$apkgs == "A", "green", "red")
tags$style(HTML(cssTemplate(color)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
tags$head(
uiOutput("css")
),
selectInput("apkgs", "Select a package", choices = options$names),
)
server <- function(input, output, session) {
output$css <- renderUI({
color <- ifelse(input$apkgs == "A", "green", "red")
tags$style(HTML(cssTemplate(color)))
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: red; }"))
} else {
inlineCSS(paste0("#algo .selectize-dropdown-content > .option[data-value='", x, "'] { color: green; }"))
}
})
)
)
})
}
shinyApp(ui, server)
ui <- fluidPage(
useShinyjs(),
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
})
)
)
})
}
shinyApp(ui, server)
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
})
unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
}
}))
)
)
})
}
shinyApp(ui, server)
runApp('Desktop/test.R')
runApp('Desktop/test.R')
library(shiny)
names <- c("A", "B", "C")
installed <- c(TRUE, FALSE, FALSE)
options <- data.frame(names, installed)
ui <- fluidPage(
tags$head(
uiOutput("css")
),
div(id="algo",
selectInput("apkgs", "Select a package", choices = options$names)
)
)
server <- function(input, output, session) {
output$css <- renderUI({
tags$style(
HTML(unlist(
lapply(names, function(x){
if(options[options$names==x,]$installed) {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: green; }", x)
} else {
sprintf("#algo .selectize-dropdown-content > .option[data-value='%s'] { color: red; }", x)
}
})
)
)
)
})
}
shinyApp(ui, server)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
options
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
BiocManager::install("GenomicScores")
library(devtools)
remotes::install_git("https://git.bioconductor.org/packages/GenomicScores", repos=BiocManager::repositories())
library(GenomicScores)
availableGScores()
getGScores("cadd.v1.3.hg19")
data <- availableGScores()
data
view(data)
View(data)
sessionInfo()
data <- availableGScores(use.internet = TRUE)
View(data)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
availableGScores()[availableGScores()$Installed]$Organism)
availableGScores()[availableGScores()$Installed]
availableGScores()$Installed
availableGScores()[availableGScores()$Installed,]
availableGScores()[availableGScores()$Installed,]$Organism
unique(availableGScores()[availableGScores()$Installed,]$Organism)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
session$userData$apkgs
organism <- input$organism
options <- availableGScores()
organism <- "Homo sapiens"
category <- "Fitness"
options[options$Organism==organism,]
options
options$Organism==organism
options[options$Organism==organism,]
options[options$Organism==organism]
str(options)
options["Organism"==organism]
options["Organism"==organism,]
organism
which(options$Organism==organism)
options$Organism==organism
options$Organism
options$Organism==organism
options[options$Organism==organism,]
options[which(options$Organism==organism),]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
remotes::install_git("https://git.bioconductor.org/packages/GenomicScores", repos=BiocManager::repositories())
library(GenomicScores)
availableGScores()
data <- availableGScores(use.internet = TRUE)
View(data)
View(data)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
View(data)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
name <- "fitCons.UCSC.hg19"
options <- availableGScores()
options[row.names(options)==name,]$Installed
options[row.names(options)==name,]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
pkgName <- "fitCons.UCSC.hg19"
find.package(pkgName)
pkgName <- "fitCons.UCSC.hg191"
find.package(pkgName)
find.package(pkgName, quiet = TRUE)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
installed.packages(noCache=TRUE)[, "Package"]
installed.packages(noCache=TRUE)
View(installed.packages(noCache=TRUE))
installed.packages(noCache=TRUE)[, "Package"]
name <- "fitCons.UCSC.hg19"
options[row.names(options)==name,]$Installed
options[row.names(options)==name,"Installed"]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(magick)
library(image.ContourDetector)
library(sp)
img <- image_read("/home/bort/Desktop/index.jpeg")
mat <- image_data(img, channels = "gray")
mat <- as.integer(mat, transpose = TRUE)
mat <- drop(mat)
contourlines <- image_contour_detector(mat)
plt <- plot(contourlines)
contourlines <- image_contour_detector(mat, Q=0)
plt <- plot(contourlines)
contourlines <- image_contour_detector(mat, Q=10)
plt <- plot(contourlines)
contourlines <- image_contour_detector(mat, Q=5)
plt <- plot(contourlines)
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
GRanges("chr22:50967020-50967025")
GRanges("chr22:50967020-50967019")
GRanges("chr42:50967020-50967019")
availableGScores()
fit <- getGScores("fitCons.UCSC.hg19")
data <- availableGScores(use.internet = TRUE)
data
library(fitCons.UCSC.hg19)
fit <- fitCons.UCSC.hg19
fit
gscores(fit, GRanges("chr22:50967020-50967025"))
gscores(fit, GRanges("chr22:50967020-50967019"))
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(fitCons.UCSC.hg19)
phast <- fitCons.UCSC.hg19
annot.pkg <- GRanges(seqnames=seqnames(phast),
IRanges(rep(1,length(seqnames(phast))), seqlengths(seqinfo(phast))))
annot.pkg
seqlevelsStyle(phast)[1]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
availableGScores()
availableGScores(use.internet)
availableGScores(use.internet=TRUE)
lin <- getScores("linsight.UCSC.hg19")
lin <- getGScores("linsight.UCSC.hg19")
lin
availableGScores()
name <- "fitCons.UCSC.hg19"
options[row.names(options)==name,"Installed"]
options
options <- availableGScores()
options[row.names(options)==name,"Installed"]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
installed.packages(noCache = TRUE)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
granges <- reactive({
req(input$granges)
granges <- GRanges(input$granges)
granges
})
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
library(shiny)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(fitCons.UCSC.hg19)
phat <- fitCons.UCSC.hg19
gscores(phat, "chr22:50967020-50967025")
gscores(phat, GRanges("chr22:50967020-50967025"))
gscores(phat, GRanges("chr22:50967020-50967025"))
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
install.packages(c("backports", "bit", "bit64", "data.table", "devtools", "dplyr", "DT", "fs", "glue", "jsonlite", "pbapply", "processx", "ps", "remotes", "tinytex", "vctrs", "xfun"))
BiocManager::install()
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
ann.pkg <- getGScores("linsight.UCSC.hg19")
ann.pkg
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
options
pkgName <- "linsight.UCSC.hg19"
options[row.names(options)==pkgName,"BiocManagerInstall"]
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
search()
pkg
pkg <- getGScores(pkgName)
pkg
search()
pkg
get(pkg)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
## imports BED files uploaded by the user through
## the shiny app. it only reads the first three
## columns: chromosome, start(0-based), end(1-based)
## it skips comments and track line
readBed <- function(filename) {
if (!file.exists(filename))
stop(sprintf("%s does not exist."))
con <- file(filename, "r")
l <- readLines(con, 1, warn=FALSE)
i <- 0
while (length(grep("^ *#", l)) > 0 || length(grep("^track", l)) > 0) {
l <- readLines(con=con, n=1, warn=FALSE)
i <- i + 1L
}
if (length(grep("^ *#", l)) == 0 && length(grep("^track", l)) == 0)
pushBack(l, con)
bed <- read.table(con, sep="\t", colClasses=c("character", "integer", "integer"),
stringsAsFactors=FALSE)
close(con)
GRanges(seqnames=bed[[1]],
IRanges(bed[[2]]+1L, bed[[3]]))
}
options
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
(!name=="" && (!options[row.names(options)==name,]$Installed ||
!options[row.names(options)==name,]$Cached))
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
etAnnotationHubOption("CACHE")
getAnnotationHubOption("CACHE")
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(GenomicScores)
shiny::runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
library(AnnotationHub)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
js
jsResetCode
AnnotationHub()
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shinyjs::extendShinyjs(text = jsResetCode, functions = c("reset"))
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
shinyjs::extendShinyjs(script = "www/scripts.js", functions = "reset")
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
options <- availableGScores()
options <- availableGScores()
options
name <- "fitCons.UCSC.hg19"
!(options[row.names(options)==name,]$Installed ||
options[row.names(options)==name,]$Cached)
!name=="" && !(options[row.names(options)==name,]$Installed ||
options[row.names(options)==name,]$Cached)
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
runApp('curro/genomic-shiny/GenomicScores/inst/shinyApp')
+
